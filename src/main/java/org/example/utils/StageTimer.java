package org.example.utils;import java.awt.Color;import java.util.List;import java.util.Timer;import java.util.TimerTask;import java.util.function.Consumer;import net.dv8tion.jda.api.EmbedBuilder;import net.dv8tion.jda.api.entities.Message;import net.dv8tion.jda.api.entities.channel.concrete.VoiceChannel;import net.dv8tion.jda.api.interactions.components.buttons.Button;public class StageTimer {    private Timer timer;    private TimerTask currentTask;    private long pauseTimeLeft;    private boolean isPaused;    private Message message;    private VoiceChannel tribuneVoiceChannel;    public StageTimer(VoiceChannel tribuneVoiceChannel) {        this.tribuneVoiceChannel = tribuneVoiceChannel;        this.timer = new Timer();        this.isPaused = false;    }    public void start(String title, long timerEndSeconds, List<Button> buttons, Consumer<String> timerCallback) {        this.timer = new Timer(); // Обновляем таймер при каждом запуске        long startTime = System.currentTimeMillis();        pauseTimeLeft = timerEndSeconds * 1000; // Устанавливаем начальное время        String timerText = "Таймер: <t:" + (startTime / 1000 + timerEndSeconds) + ":R>";        EmbedBuilder embedBuilder = new EmbedBuilder();        embedBuilder.setTitle(title).setDescription(timerText).setColor(Color.BLUE);        // Предполагаем, что tribuneVoiceChannel - это канал, куда вы отправляете сообщение        tribuneVoiceChannel.sendMessageEmbeds(embedBuilder.build()).setActionRow(buttons).queue(sentMessage -> {            this.message = sentMessage;            scheduleTimer(timerEndSeconds * 1000, title, buttons, timerCallback);        });    }    private void scheduleTimer(long delay, String title, List<Button> buttons, Consumer<String> timerCallback) {        currentTask = new TimerTask() {            @Override            public void run() {                timerCallback.accept(title);                List<Button> disabledButtons = buttons.stream().map(Button::asDisabled).toList();                EmbedBuilder updatedEmbed = new EmbedBuilder();                updatedEmbed.setTitle(title).setDescription("Время вышло!").setColor(Color.BLUE);                message.editMessageEmbeds(updatedEmbed.build()).setActionRow(disabledButtons).queue();            }        };        timer.schedule(currentTask, delay);    }    public void pause() {        if (!isPaused && currentTask != null) {            currentTask.cancel();            pauseTimeLeft -= System.currentTimeMillis() - (System.currentTimeMillis() - pauseTimeLeft / 1000 * 1000);            isPaused = true;        }    }    public void resume() {        if (isPaused) {            scheduleTimer(pauseTimeLeft, null, null, null);            isPaused = false;        }    }    public long getCurrentTimeLeft() {        if (isPaused) {            return pauseTimeLeft;        } else {            long elapsed = System.currentTimeMillis() - (System.currentTimeMillis() - pauseTimeLeft / 1000 * 1000);            return pauseTimeLeft - elapsed;        }    }}